Blockly.Blocks['object'] = {
  this.setOutput(true, "Object");
};

Blockly.Blocks['get_relationship_object'] = {
    this.appendValueInput("object")
        .setCheck("Object")
        .appendField("object");
    this.appendValueInput("relationship")
        .setCheck("Relationship")
        .appendField("relationship");
    this.appendValueInput("boolean")
        .setCheck("Boolean")
        .appendField("boolean");

    this.setOutput(true, ["Object", "Boolean"]);
};

Blockly.Blocks['get_condition_object'] = {
    this.appendValueInput("condition")
        .setCheck("Boolean")
        .appendField("condition");

    this.setOutput(true, ["Object", "Boolean"]);
};

Blockly.Blocks['get_extr_object'] = {
    this.appendValueInput("extreme_condition")
        .setCheck("Boolean")
        .appendField("extreme condition");
    this.appendValueInput("general_condition")
        .setCheck("Boolean")
        .appendField("general condition");

    this.setOutput(true, ["Object", "Boolean"]);
};

Blockly.Blocks['ref_to_decision_tree_var'] = {
    this.setOutput(true, ["Object", "VarObject"]);
};

Blockly.Blocks['variable'] = {
    this.setOutput(true, "Object");
};



Blockly.Blocks['class'] = {
  this.setOutput(true, "Class");
};

Blockly.Blocks['get_class'] = {
    this.appendValueInput("object").setCheck("Object")

    this.setOutput(true, "Class");
};



Blockly.Blocks['property'] = {
  this.setOutput(true, "Property");
};



Blockly.Blocks['relationship'] = {
  this.setOutput(true, "Relationship");
};



Blockly.Blocks['string'] = {
  this.setOutput(true, "String");
};



Blockly.Blocks['boolean'] = {
  this.setOutput(true, "Boolean");
};

Blockly.Blocks['check_object_class'] = {
    this.appendValueInput("object")
        .setCheck("Object")
        .appendField("object");
    this.appendValueInput("class")
        .setCheck("Class")
        .appendField("class");

    this.setOutput(true, "Boolean");
};

Blockly.Blocks['check_relationship'] = {
    this.appendValueInput("object")
        .setCheck("Object")
        .appendField("object");
    this.appendValueInput("relationship")
        .setCheck("Relationship")
        .appendField("relationship");
    this.appendValueInput("object" + i).setCheck("Object").appendField("object"+i)

    this.setOutput(true, "Boolean");
};

Blockly.Blocks['and'] = {
    this.appendValueInput("operand1")
        .setCheck("Boolean")
        .appendField("operand1");
    this.appendValueInput("operand2")
        .setCheck("Boolean")
        .appendField("operand2");
    
    this.setOutput(true, "Boolean");
};

Blockly.Blocks['or'] = {
    this.appendValueInput("operand1")
        .setCheck("Boolean")
        .appendField("operand1");
    this.appendValueInput("operand2")
        .setCheck("Boolean")
        .appendField("operand2");
    this.setOutput(true, "Boolean");
};

Blockly.Blocks['not'] = {
    this.appendValueInput("operand")
        .setCheck("Boolean")
        .appendField("operand");
    this.setOutput(true, "Boolean");
};

Blockly.Blocks['comparison'] = {
    this.appendValueInput("operand1")
        .setCheck(["String", "Integer", "Double", "Enum"])
        .appendField("operand1");
    this.appendValueInput("operand2")
        .setCheck(["String", "Integer", "Double", "Enum"])
        .appendField("operand1");

    this.setOutput(true, "Boolean");
};

Blockly.Blocks['quantifier_of_existence'] = {
    this.appendValueInput("condition")
        .setCheck("Boolean")
        .appendField("condition");
    
    this.setOutput(true, "Boolean");
};

Blockly.Blocks['quantifier_of_generality'] = {
    this.appendValueInput("definition_area")
        .setCheck("Boolean")
        .appendField("definition area");
    this.appendValueInput("verification_condition")
        .setCheck("Boolean")
        .appendField("verification condition");

    this.setOutput(true, "Boolean");
};



Blockly.Blocks['integer'] = {
  this.setOutput(true, "Integer");
};

Blockly.Blocks['double'] = {
  this.setOutput(true, "Double");
};

Blockly.Blocks['comparison_result'] = {
  this.setOutput(true, "ComparisonResult");
};

Blockly.Blocks['three_digit_comparison'] = {
    this.appendValueInput("operand1")
        .setCheck(["String", "Integer", "Double", "Enum"])
        .appendField("operand1");
    this.appendValueInput("operand2")
        .setCheck(["String", "Integer", "Double", "Enum"])
        .appendField("operand2");

    this.setOutput(true, "ComparisonResult");
};



Blockly.Blocks['get_property_value'] = {
    this.appendValueInput("object").setCheck("Object");
    this.appendValueInput("property").setCheck("Property");

    this.setOutput(true, ["Boolean", "String", "Integer", "Double", "Enum"]);
};



Blockly.Blocks['enum'] = {
    this.setOutput(true, "Enum");
};